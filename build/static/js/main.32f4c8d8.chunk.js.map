{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","state","tuntilista","state2","lista","state3","graphdata","_this2","fetch","then","response","json","setState","viesti","taulukko","length","uniqueIds","map","ids","employeeId","unique","toConsumableArray","Set","index2","push","id","tunnit","nimi","avustin","apu2","element2","hours","employeeName","apu3","x","y","react_default","a","createElement","index","element","workhourId","projectId","date","projectName","className","href","es","height","width","xType","title","data","obj","objectSpread","label","toString","labelAnchorX","labelAnchorY","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAsLeA,cA9Kd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,IACNQ,QAAQC,IAAI,8CAEZR,EAAKS,MAAQ,CAAEC,WAAY,IAC3BV,EAAKW,OAAS,CAAEC,MAAO,IACvBZ,EAAKa,OAAS,CAAEC,UAAW,IANXd,mFAUE,IAAAe,EAAAZ,KAKlBa,MAAM,yDACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJZ,QAAQC,IAAIW,GAEZZ,QAAQC,IAAI,iDACZO,EAAKK,SAAS,CAAEV,WAAYS,IAC5BZ,QAAQC,IAAI,mDAIhBD,QAAQC,IAAI,wEAKdD,QAAQC,IAAI,sCAEV,IAAIa,EAAS,GACXC,EAAW,GAKf,GAAInB,KAAKM,MAAMC,WAAWa,OAAS,EAAG,CAgBlC,IAbA,IAAIC,EAAYrB,KAAKM,MAAMC,WAAWe,IAAI,SAAUC,GAClD,OAAOA,EAAIC,aAMTC,EAAM3B,OAAA4B,EAAA,EAAA5B,CAAO,IAAI6B,IAAIN,IAMhBO,EAAS,EAAGA,EAASH,EAAOL,OAAQQ,IAC3C5B,KAAKQ,OAAOC,MAAMoB,KAAK,CAACC,GAAIL,EAAOG,GAASG,OAAQ,EAAGC,KAAM,KAM/D,IAAK,IAAIC,EAAU,EAAGA,EAAUR,EAAOL,OAAQa,IAC7C,IAAK,IAAIC,EAAO,EAAGA,EAAOlC,KAAKM,MAAMC,WAAWa,OAAQc,IAAQ,CAC9D,IAAMC,EAAWnC,KAAKM,MAAMC,WAAW2B,GAInClC,KAAKQ,OAAOC,MAAMwB,GAASH,KAAOK,EAASX,aAC7CxB,KAAKQ,OAAOC,MAAMwB,GAASF,OAAS/B,KAAKQ,OAAOC,MAAMwB,GAASF,OAASI,EAASC,MACjFpC,KAAKQ,OAAOC,MAAMwB,GAASD,KAAOG,EAASE,cAajD,IAAK,IAAIC,EAAO,EAAIA,EAAOtC,KAAKQ,OAAOC,MAAMW,OAASkB,IACpDtC,KAAKU,OAAOC,UAAUkB,KAAK,CAACU,EAAGvC,KAAKQ,OAAOC,MAAM6B,GAAMN,KAAMQ,EAAGxC,KAAKQ,OAAOC,MAAM6B,GAAMP,SAM5F,GAAI/B,KAAKM,MAAMC,WAAWa,OAAS,EAAG,CAEpCD,EAASU,KAAKY,EAAAC,EAAAC,cAAA,UACZF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,8BAIF,IAAK,IAAIC,EAAQ,EAAGA,EAAQ5C,KAAKM,MAAMC,WAAWa,OAAQwB,IAAS,CACjE,IAAMC,EAAU7C,KAAKM,MAAMC,WAAWqC,GAGtCzB,EAASU,KAAKY,EAAAC,EAAAC,cAAA,UACZF,EAAAC,EAAAC,cAAA,UAAKE,EAAQC,YACbL,EAAAC,EAAAC,cAAA,UAAKE,EAAQrB,YACbiB,EAAAC,EAAAC,cAAA,UAAKE,EAAQE,WACbN,EAAAC,EAAAC,cAAA,UAAKE,EAAQG,MACbP,EAAAC,EAAAC,cAAA,UAAKE,EAAQT,OACbK,EAAAC,EAAAC,cAAA,UAAKE,EAAQR,cACbI,EAAAC,EAAAC,cAAA,UAAKE,EAAQI,qBAMjB/B,EAAS,oCAYX,OATAd,QAAQC,IAAI,aACZD,QAAQC,IAAIL,KAAKU,OAAOC,WAStB8B,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAEbT,EAAAC,EAAAC,cAAA,iDAEAF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,uCAAR,yCAEAV,EAAAC,EAAAC,cAAA,iCAEAF,EAAAC,EAAAC,cAAA,sDAAuCF,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,oCAAR,aAAvC,4BACAV,EAAAC,EAAAC,cAAA,uGAEAF,EAAAC,EAAAC,cAAA,OAAKO,UAAU,SACbT,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,OAAQ,IAAKC,MAAQ,IAAKC,MAAM,WACtCd,EAAAC,EAAAC,cAACS,EAAA,EAAD,MACAX,EAAAC,EAAAC,cAACS,EAAA,EAAD,MACAX,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOI,MAAM,sBACbf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOI,MAAM,uBACbf,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAmBK,KAAMzD,KAAKU,OAAOC,YACrC8B,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACUK,KAAMzD,KAAKU,OAAOC,UAAUW,IAAI,SAAAoC,GAC5B,OAAO5D,OAAA6D,EAAA,EAAA7D,CAAA,GAAK4D,EAAZ,CAAiBE,MAAOF,EAAIlB,EAAEqB,eAElCC,aAAa,SACbC,aAAa,uBAK/BtB,EAAAC,EAAAC,cAAA,4BACGF,EAAAC,EAAAC,cAAA,SAAIzB,GACHuB,EAAAC,EAAAC,cAAA,iIACJF,EAAAC,EAAAC,cAAA,SAAOb,GAAK,OACTW,EAAAC,EAAAC,cAAA,aACGxB,YAxKQ6C,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/D,KAAK,SAAAgE,GACjCA,EAAaC","file":"static/js/main.32f4c8d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\n\nimport {XYPlot, VerticalBarSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis, LabelSeries} from 'react-vis';\n\nclass App extends Component {\n\n\tconstructor(props) {\n    super(props);\n    console.log(\"App-komponentti: konstruktori (rakentaja).\");\n\n    this.state = { tuntilista: [] };\n    this.state2 = { lista: [] };\n    this.state3 = { graphdata: [] };\n    //this.state4 = { dropdowni: [] };\n  }\n\n  componentDidMount() {\n\n    // console.log(\"App-komponentti: componentDidMount-metodissa.\");\n    // this.setState({ title: \"Väliaikainen otsikko\"} );\n\n    fetch('https://reactraportti.azurewebsites.net/api/Workhours')\n      .then(response => response.json())\n      .then(json => {\n        console.log(json);\n\n        console.log(\"App-komponentti: aloitetaan setState()-kutsu.\");\n        this.setState({ tuntilista: json });\n        console.log(\"App-komponentti: setState()-metodia kutsuttu.\");\n\n      });\n\n    console.log(\"App-komponentti: Fetch-kutsu tehty.\");\n  }\n\n  render() {\n\n\t\tconsole.log(\"App-komponentti: render-metodissa.\");\n\n    let viesti = \"\";\n\t\tlet taulukko = [];\n\n    //const lista = [];\n    //const graphdata = [];\n\n\t\tif (this.state.tuntilista.length > 0) {\n\n      // haetaan idt listasta\n      var uniqueIds = this.state.tuntilista.map(function (ids) {\n        return ids.employeeId\n      });\n\n      //console.log(uniqueIds);\n\n      // otetaan vain uniikit idt\n      let unique = [...new Set(uniqueIds)]; \n\n      //console.log(unique);\n      //console.log(unique.length);\n      \n      // Lisätään IDt listaan\n      for (let index2 = 0; index2 < unique.length; index2++){\n        this.state2.lista.push({id: unique[index2], tunnit: 0, nimi: \"\"});\n      }\n\n      //console.log(this.state2.lista);\n    \n      // Haetaan kokonaistunnit ja idlle kohdistetut nimet ja kasataan ne lista-objektiin\n      for (let avustin = 0; avustin < unique.length; avustin++) {\n        for (let apu2 = 0; apu2 < this.state.tuntilista.length; apu2++) {\n          const element2 = this.state.tuntilista[apu2];\n          //console.log(element2);\n          //console.log(avustin);\n          //console.log(apu2);\n          if (this.state2.lista[avustin].id === element2.employeeId) {\n            this.state2.lista[avustin].tunnit = this.state2.lista[avustin].tunnit + element2.hours;\n            this.state2.lista[avustin].nimi = element2.employeeName;\n          }\n          else {\n            //console.log(\"Huti\");\n          }\n        }\n      }\n\n      \n\n      //console.log(this.state2.lista);\n\n      // Tehdään uusi lista joka annetaan graphin piirtäjälle myöhemmin\n      for (let apu3 = 0 ; apu3 < this.state2.lista.length ; apu3++) {\n        this.state3.graphdata.push({x: this.state2.lista[apu3].nimi, y: this.state2.lista[apu3].tunnit, });\n      }\n\n      //console.log(this.state3.graphdata);\n    }\n\n    if (this.state.tuntilista.length > 0) {\n\n      taulukko.push(<tr>\n        <th>Tunti ID</th>\n        <th>Työntekijän ID</th>\n        <th>Projekti ID</th>\n        <th>Päivämäärä</th>\n        <th>Tunnit</th>\n        <th>Työntekijän nimi</th>\n        <th>Projektin nimi</th>\n      </tr>);\n\n\n      for (let index = 0; index < this.state.tuntilista.length; index++) {\n        const element = this.state.tuntilista[index];\n\t\t\t\t//console.log(this.state.tuntilista[index]);\n\n        taulukko.push(<tr>\n          <td>{element.workhourId}</td>\n          <td>{element.employeeId}</td>\n          <td>{element.projectId}</td>\n          <td>{element.date}</td>\n          <td>{element.hours}</td>\n          <td>{element.employeeName}</td>\n          <td>{element.projectName}</td>\n        </tr>);\n      }\n      \n    }\n    else {\n      viesti = \"Ladataan tietoja tietokannasta...\"\n    }\n\n    console.log(\"graphdata\");\n    console.log(this.state3.graphdata);\n  \n    //for (let index = 0;index < this.state3.graphdata.length;index++){\n    //  this.state4.dropdowni.push(<span>{this.state3.graphdata.x}</span>);\n    //}\n    \n    //console.log(this.state4.dropdowni);\n\n    return (\n      <div className=\"App\">\n\n        <h1>Työtuntien raportointi Reactilla</h1>\n\n        <a href=\"http://tyotunnit.azurewebsites.net/\">Takaisin ASP.NET työtuntisivuille.</a>\n\n        <h2>Työtuntitaulukko</h2>\n\n        <p>Alla oleva graafi on tehty käyttäen <a href=\"http://uber.github.io/react-vis/\">React-Vis</a> visualisointikirjastoa.</p>\n        <p>Siinä on listattu jokainen työntekijä ja laskettu yhteen työtunnit palkkeihin.</p>\n\n        <div className=\"Graph\">\n          <XYPlot height={500} width= {500} xType=\"ordinal\" >\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis title=\"Työntekijät\"/>\n            <YAxis title=\"Tunnit yhteensä\"/>\n            <VerticalBarSeries data={this.state3.graphdata} />\n            <LabelSeries\n                      data={this.state3.graphdata.map(obj => {\n                          return { ...obj, label: obj.y.toString() }\n                      })}\n                      labelAnchorX=\"middle\"\n                      labelAnchorY=\"text-before-edge\"\n                  />\n          </XYPlot>\n        </div>\n\n\t\t\t\t<h3>Tietokantahaku</h3>\n      \t<p>{viesti}</p>\n        <p>Jos mitään ongelmia ei ole tietokannan haussa, niin alla olevassa taulukossa on tietokannan tiedot taulukossa.</p>\n\t\t\t\t<table id = \"t01\">\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t{taulukko}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}